#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.5 on Mon Apr 27 13:06:47 2020
#

import wx
import re
import operator


class SpecParser(object):
    def __init__(self):
        self.text_nominal = ''
        self.text_spec = ''
        self.prefix = {'c': 1e-2,
                       'm': 1e-3,
                       'u': 1e-6,
                       'μ': 1e-6,
                       'n': 1e-9,
                       'p': 1e-12,
                       'f': 1e-15,
                       'a': 1e-18,
                       'z': 1e-21,
                       'y': 1e-24}
        unit = ['s', 'm', 'kg', 'A', 'K', 'mol', 'cd', 'V', 'Ω', 'ohm', 'J']
        self.units = [p + u for u in unit for p in self.prefix.keys()] + ['%', 'PPM', 'ppm']
        self.opn = {"+": operator.add,
                    "-": operator.sub,
                    "*": operator.mul,
                    "/": operator.truediv,
                    "^": operator.pow}

    def find_multiplier(self, val):
        # l could equal 'PPM' or '%' or 'mA' or 'm'. returns multiplier
        print(val)
        string_val, unit = tuple(filter(None, re.split(r'(-?\d*\.?\d+)', val)))
        print(string_val)
        print(string_val)
        print(unit)
        val = 0.0
        if unit in ['PPM', 'ppm']:
            val = 1e-6
        elif unit in ['%']:
            val = 1e-2
        elif len(unit) == 1:
            val = 1.0
        elif unit[0] in self.prefix.keys():
            val = self.prefix[unit[0]]
        else:
            print('ERROR: invalid string: units are not recognized.')
        return val * float(string_val)

    def eval_units(self, op):
        # op could equal 12PPM, 12%, 12mA, or 12m...
        # https://stackoverflow.com/a/3340115/3382269
        spec = list(filter(None, re.split(r'(-?\d*\.?\d+)', op)))
        nom = list(filter(None, re.split(r'(-?\d*\.?\d+)', self.text_nominal)))
        s = spec[0]
        if spec[1] == '%' or spec[1] in ['PPM', 'ppm']:
            s = str(self.find_multiplier(op))
        else:
            s = str(self.find_multiplier(op) / (self.find_multiplier(self.text_nominal)))

            # print('not a recognized string format')
        print(f's: {s}')
        return s

    def buildStack(self, spec, nominal=''):
        """
        https://stackoverflow.com/a/4998688/3382269
        https://stackoverflow.com/a/2136580/3382269
        """
        self.text_nominal = nominal
        ops = ['\+']
        print(spec)
        s = [item.strip() for item in re.split(f'({"|".join(ops)})', spec)]
        opStack = []
        stack = []
        for item in s:
            if item in '+-*/':
                opStack.append(item)
            else:
                stack.append(item)
        return stack + opStack[::-1]  # merges opStack in reverse order with stack

    def evaluateStack(self, s):
        # note: operands are pushed onto the stack in reverse order. See .pop()
        op, num_args = s.pop(), 0
        if isinstance(op, tuple):
            op, num_args = op
        if op in "+-*/^":
            # note: operands are pushed onto the stack in reverse order
            op2 = self.evaluateStack(s)
            op1 = self.evaluateStack(s)
            return self.opn[op](op1, op2)
        else:
            # k = [item.strip() for item in re.split(f'({"|".join(self.units)})', op)]
            # k = list(filter(None, k))
            # try to evaluate as int first, then as float if int fails
            s = self.eval_units(op)
            try:
                return int(s)
            except ValueError:
                return float(s)


class CalcFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((364, 295))

        self.parser = SpecParser()

        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.panel_5 = wx.Panel(self.panel_4, wx.ID_ANY)
        self.text_range = wx.TextCtrl(self.panel_5, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_nominal = wx.TextCtrl(self.panel_5, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.panel_6 = wx.Panel(self.panel_5, wx.ID_ANY)
        self.text_spec = wx.TextCtrl(self.panel_6, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.radio_box_1 = wx.RadioBox(self.panel_5, wx.ID_ANY, "",
                                       choices=["PPM", "%", "Value"],
                                       majorDimension=3,
                                       style=wx.RA_SPECIFY_ROWS)
        self.panel_7 = wx.Panel(self.panel_5, wx.ID_ANY)
        self.out_text = wx.TextCtrl(self.panel_7, wx.ID_ANY, "")

        calc_Event = lambda event: self.calc(event)
        self.Bind(wx.EVT_TEXT_ENTER, calc_Event, self.text_range)
        self.Bind(wx.EVT_TEXT_ENTER, calc_Event, self.text_nominal)
        self.Bind(wx.EVT_TEXT_ENTER, calc_Event, self.text_spec)
        self.Bind(wx.EVT_RADIOBOX, calc_Event, self.radio_box_1)

        self.__set_properties()
        self.__do_layout()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Equipment Specifications Calculator")
        self.text_range.SetMinSize((70, 23))
        self.text_range.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        self.text_nominal.SetMinSize((70, 23))
        self.text_nominal.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        self.text_spec.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        self.radio_box_1.SetSelection(0)

        self.text_range.SetValue('12mA')
        self.text_nominal.SetValue('1.2mA')
        self.text_spec.SetValue('0.15% + 3uA')

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridBagSizer(0, 0)
        grid_sizer_3 = wx.GridBagSizer(0, 0)
        grid_sizer_2 = wx.GridBagSizer(0, 0)
        label_1 = wx.StaticText(self.panel_5, wx.ID_ANY, "Equipment Specifications")
        label_1.SetFont(wx.Font(20, wx.FONTFAMILY_DECORATIVE, wx.FONTSTYLE_ITALIC, wx.FONTWEIGHT_BOLD, 0, ""))
        grid_sizer_1.Add(label_1, (0, 0), (1, 3), 0, 0)
        static_line_1 = wx.StaticLine(self.panel_5, wx.ID_ANY)
        static_line_1.SetMinSize((350, 2))
        grid_sizer_1.Add(static_line_1, (1, 0), (1, 3), wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 10)
        label_2 = wx.StaticText(self.panel_5, wx.ID_ANY, "Range:")
        grid_sizer_1.Add(label_2, (2, 0), (1, 1), 0, 0)
        label_3 = wx.StaticText(self.panel_5, wx.ID_ANY, "Nominal")
        grid_sizer_1.Add(label_3, (2, 1), (1, 1), 0, 0)
        label_4 = wx.StaticText(self.panel_5, wx.ID_ANY, "Specification:")
        grid_sizer_1.Add(label_4, (2, 2), (1, 1), 0, 0)
        grid_sizer_1.Add(self.text_range, (3, 0), (1, 1), wx.RIGHT, 10)
        grid_sizer_1.Add(self.text_nominal, (3, 1), (1, 1), wx.RIGHT, 10)
        label_5 = wx.StaticText(self.panel_6, wx.ID_ANY, u"± (")
        label_5.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        grid_sizer_2.Add(label_5, (0, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        grid_sizer_2.Add(self.text_spec, (0, 1), (1, 1), 0, 0)
        label_6 = wx.StaticText(self.panel_6, wx.ID_ANY, ")")
        label_6.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        grid_sizer_2.Add(label_6, (0, 2), (1, 1), wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
        self.panel_6.SetSizer(grid_sizer_2)
        grid_sizer_1.Add(self.panel_6, (3, 2), (1, 1), wx.EXPAND, 0)
        static_line_2 = wx.StaticLine(self.panel_5, wx.ID_ANY)
        static_line_2.SetMinSize((350, 2))
        grid_sizer_1.Add(static_line_2, (4, 0), (1, 3), wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 10)
        grid_sizer_1.Add(self.radio_box_1, (5, 0), (2, 1), wx.TOP, 5)
        label_7 = wx.StaticText(self.panel_5, wx.ID_ANY, "Output")
        grid_sizer_1.Add(label_7, (5, 1), (1, 2), wx.TOP, 10)
        label_8 = wx.StaticText(self.panel_7, wx.ID_ANY, u"±")
        label_8.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        grid_sizer_3.Add(label_8, (0, 0), (1, 1), wx.RIGHT, 5)
        grid_sizer_3.Add(self.out_text, (0, 1), (1, 1), 0, 0)
        self.panel_7.SetSizer(grid_sizer_3)
        grid_sizer_1.Add(self.panel_7, (6, 1), (1, 2), wx.EXPAND, 0)
        self.panel_5.SetSizer(grid_sizer_1)
        sizer_2.Add(self.panel_5, 1, wx.ALL | wx.EXPAND, 5)
        self.panel_4.SetSizer(sizer_2)
        sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()

    def calc(self, e):
        output = ''
        stack = self.parser.buildStack(self.text_spec.GetValue(), self.text_nominal.GetValue())
        parsed = self.parser.evaluateStack(stack)
        if self.radio_box_1.GetStringSelection() == 'PPM':
            output = str(parsed * 1e6) + ' PPM'
        elif self.radio_box_1.GetStringSelection() == '%':
            output = str(parsed * 100) + '%'
        else:
            output = str(parsed * float(self.parser.find_multiplier(self.text_nominal.GetValue())))

        self.out_text.SetValue(output)


class MyApp(wx.App):
    def OnInit(self):
        self.frame = CalcFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
